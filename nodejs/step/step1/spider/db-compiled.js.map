{"version":3,"sources":["db.js"],"names":[],"mappings":"AAAA;AACA,IAAI,cAAc,QAAQ,SAAR,EAAmB,WAArC;AACA;AACA,IAAI,cAAc,oCAAlB;AACA;AACA,IAAI,aAAa,UAAS,EAAT,EAAY,KAAZ,EAAmB,QAAnB,EAA6B;AAC1C;AACA,QAAI,aAAa,GAAG,UAAH,CAAc,cAAd,CAAjB;AACA;AACA,QAAI,OAAO,KAAX,CAJ0C,CAI1B;AAChB,eAAW,MAAX,CAAkB,IAAlB,EAAwB,UAAS,GAAT,EAAc,MAAd,EAAsB;AAC1C;AACA,YAAG,GAAH,EACA;AACI,oBAAQ,GAAR,CAAY,WAAU,GAAtB;AACA;AACH;AACD;AACA,iBAAS,MAAT;AACH,KATD;AAUH,CAfD;AAgBA;AACA,IAAI,aAAa,UAAS,EAAT,EAAa,QAAb,EAAuB;AACpC;AACA,QAAI,aAAa,GAAG,UAAH,CAAc,OAAd,CAAjB;AACA;AACA,QAAK,QAAM,EAAC,KAAI,EAAC,QAAO,EAAR,EAAL,EAAX;AACA;AACA,QAAI,MAAI,EAAC,MAAK,EAAC,KAAI,EAAL,EAAN,EAAR;AACA,eAAW,UAAX,CAAsB,KAAtB,EAA4B,GAA5B,EAAiC,UAAS,GAAT,EAAc,MAAd,EAAsB;AACnD;AACA,YAAG,GAAH,EACA;AACI,oBAAQ,GAAR,CAAY,WAAU,GAAtB;AACA;AACH;AACD;AACA,iBAAS,MAAT;AACH,KATD;AAUH,CAjBD;;AAoBA;AACA,IAAI,WAAW,UAAS,EAAT,EAAa,QAAb,EAAuB;AAClC;AACA,QAAI,aAAa,GAAG,UAAH,CAAc,OAAd,CAAjB;AACA;AACA,QAAK,QAAM,EAAC,KAAI,EAAC,QAAO,EAAR,EAAL,EAAX;AACA;AACA,QAAI,MAAI,EAAC,MAAK,CAAN,EAAQ,KAAI,CAAZ,EAAR;AACA,eAAW,IAAX,CAAgB,KAAhB,EAAsB,GAAtB,EAA2B,OAA3B,CAAmC,UAAS,GAAT,EAAc,MAAd,EAAsB;AACrD;AACA,YAAG,GAAH,EACA;AACI,oBAAQ,GAAR,CAAY,WAAU,GAAtB;AACA;AACH;AACD;AACA,iBAAS,MAAT;AACH,KATD;AAUH,CAjBD;AAkBA;AACA,IAAI,aAAa,UAAS,EAAT,EAAa,QAAb,EAAuB;AACpC;AACA,QAAI,aAAa,GAAG,UAAH,CAAc,OAAd,CAAjB;AACA;AACA,QAAK,QAAM,EAAC,KAAI,EAAC,OAAM,GAAP,EAAL,EAAX;AACA,eAAW,MAAX,CAAkB,KAAlB,EAAwB,UAAS,GAAT,EAAc,MAAd,EAAsB;AAC1C;AACA,YAAG,GAAH,EACA;AACI,oBAAQ,GAAR,CAAY,WAAU,GAAtB;AACA;AACH;AACD;AACA,iBAAS,MAAT;AACH,KATD;AAUH,CAfD;AAgBA;AACA,SAAS,KAAT,CAAe,KAAf,EAAsB;AAClB,gBAAY,OAAZ,CAAoB,WAApB,EAAiC,UAAU,GAAV,EAAe,EAAf,EAAmB;AAChD,gBAAQ,GAAR,CAAY,OAAZ;AACA;AACA,mBAAW,EAAX,EAAe,KAAf,EAAsB,UAAU,MAAV,EAAkB;AACpC;AACA,oBAAQ,GAAR,CAAY,MAAZ;AACA;AACA,eAAG,KAAH;AACH,SALD;AAMA;;;;;;AAMA;;;;;;AAMA;;;;;;AAOH,KA5BD;AA6BH;AACD,QAAQ,EAAR,GAAa,EAAC,OAAM,KAAP,EAAb","file":"db-compiled.js","sourcesContent":["//引入mongodb模块，获得客户端对象\r\nvar MongoClient = require('mongodb').MongoClient;\r\n//连接字符串\r\nvar DB_CONN_STR = 'mongodb://localhost:27017/blogYuan';\r\n/*新增操作*/\r\nvar insertData = function(db,datas, callback) {\r\n    //获得指定的集合\r\n    var collection = db.collection('blogYuanDate');\r\n    //插入数据\r\n    var data = datas//[{_id:7,\"name\":'rose',\"age\":21},{_id:8,\"name\":'mark',\"age\":22}];\r\n    collection.insert(data, function(err, result) {\r\n        //如果存在错误\r\n        if(err)\r\n        {\r\n            console.log('Error:'+ err);\r\n            return;\r\n        }\r\n        //调用传入的回调方法，将操作结果返回\r\n        callback(result);\r\n    });\r\n}\r\n/*更新操作*/\r\nvar updateData = function(db, callback) {\r\n    //获得指定的集合\r\n    var collection = db.collection('users');\r\n    //要修改数据的条件，>=10岁的用户\r\n    var  where={age:{\"$gte\":10}};\r\n    //要修改的结果\r\n    var set={$set:{age:95}};\r\n    collection.updateMany(where,set, function(err, result) {\r\n        //如果存在错误\r\n        if(err)\r\n        {\r\n            console.log('Error:'+ err);\r\n            return;\r\n        }\r\n        //调用传入的回调方法，将操作结果返回\r\n        callback(result);\r\n    });\r\n}\r\n\r\n\r\n/*查询*/\r\nvar findData = function(db, callback) {\r\n    //获得指定的集合\r\n    var collection = db.collection('users');\r\n    //要查询数据的条件，<=10岁的用户\r\n    var  where={age:{\"$lte\":10}};\r\n    //要显示的字段\r\n    var set={name:1,age:1};\r\n    collection.find(where,set).toArray(function(err, result) {\r\n        //如果存在错误\r\n        if(err)\r\n        {\r\n            console.log('Error:'+ err);\r\n            return;\r\n        }\r\n        //调用传入的回调方法，将操作结果返回\r\n        callback(result);\r\n    });\r\n}\r\n/*删除*/\r\nvar removeData = function(db, callback) {\r\n    //获得指定的集合\r\n    var collection = db.collection('users');\r\n    //要删除数据的条件，_id>2的用户删除\r\n    var  where={age:{\"$gt\":100}};\r\n    collection.remove(where,function(err, result) {\r\n        //如果存在错误\r\n        if(err)\r\n        {\r\n            console.log('Error:'+ err);\r\n            return;\r\n        }\r\n        //调用传入的回调方法，将操作结果返回\r\n        callback(result);\r\n    });\r\n}\r\n//使用客户端连接数据，并指定完成时的回调方法\r\nfunction setDb(datas) {\r\n    MongoClient.connect(DB_CONN_STR, function (err, db) {\r\n        console.log(\"连接成功！\");\r\n        //执行插入数据操作，调用自定义方法\r\n        insertData(db, datas ,function (result) {\r\n            //显示结果\r\n            console.log(result);\r\n            //关闭数据库\r\n            db.close();\r\n        });\r\n        /*updateData(db, function(result) {\r\n         //显示结果\r\n         console.log(result);\r\n         //关闭数据库\r\n         db.close();\r\n         });*/\r\n        /* findData(db, function(result) {\r\n         //显示结果\r\n         console.log(result);\r\n         //关闭数据库\r\n         db.close();\r\n         });*/\r\n        /* removeData(db, function(result) {\r\n         //显示结果\r\n         console.log(result);\r\n         //关闭数据库\r\n         db.close();\r\n         });*/\r\n\r\n    });\r\n}\r\nexports.db = {setDb:setDb};"]}